{"version":3,"file":"ng2-validation.umd.js","sources":["../src/base64/directive.ts","../src/util/lang.ts","../src/base64/validator.ts","../src/credit-card/directive.ts","../src/credit-card/validator.ts","../src/date/directive.ts","../src/date/validator.ts","../src/date-ios/directive.ts","../src/date-ios/validator.ts","../src/digits/directive.ts","../src/digits/validator.ts","../src/email/directive.ts","../src/email/validator.ts","../src/equal/directive.ts","../src/equal/validator.ts","../src/equal-to/directive.ts","../src/equal-to/validator.ts","../src/greater-than/directive.ts","../src/greater-than/validator.ts","../src/greater-than-equal/directive.ts","../src/greater-than-equal/validator.ts","../src/json/directive.ts","../src/json/validator.ts","../src/less-than/directive.ts","../src/less-than/validator.ts","../src/less-than-equal/directive.ts","../src/less-than-equal/validator.ts","../src/max/directive.ts","../src/max/validator.ts","../src/max-date/directive.ts","../src/max-date/validator.ts","../src/min/directive.ts","../src/min/validator.ts","../src/min-date/directive.ts","../src/min-date/validator.ts","../src/not-equal/directive.ts","../src/not-equal/validator.ts","../src/not-equal-to/directive.ts","../src/not-equal-to/validator.ts","../src/number/directive.ts","../src/number/validator.ts","../src/phone/directive.ts","../src/phone/validator.ts","../src/range/directive.ts","../src/range/validator.ts","../src/range-length/directive.ts","../src/range-length/validator.ts","../src/url/directive.ts","../src/url/validator.ts","../src/uuid/directive.ts","../src/uuid/validator.ts","../src/index.ts"],"sourcesContent":["import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { base64 } from './';\r\n\r\nconst BASE64_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => Base64Validator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[base64][formControlName],[base64][formControl],[base64][ngModel]',\r\n  providers: [BASE64_VALIDATOR]\r\n})\r\nexport class Base64Validator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return base64(c);\r\n  }\r\n}\r\n","export function isPresent(obj: any): boolean {\r\n  return obj !== undefined && obj !== null;\r\n}\r\n\r\nexport function isDate(obj: any): boolean {\r\n  return !/Invalid|NaN/.test(new Date(obj).toString());\r\n}","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const base64: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : {'base64': true};\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { creditCard } from './';\r\n\r\nconst CREDIT_CARD_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => CreditCardValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\r\n  providers: [CREDIT_CARD_VALIDATOR]\r\n})\r\nexport class CreditCardValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return creditCard(c);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const creditCard: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n\r\n  let sanitized = v.replace(/[^0-9]+/g, '');\r\n\r\n  // problem with chrome\r\n  if (!(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/.test(sanitized))) {\r\n    return {creditCard: true};\r\n  }\r\n\r\n  let sum = 0;\r\n  let digit;\r\n  let tmpNum;\r\n  let shouldDouble;\r\n  for (let i = sanitized.length - 1; i >= 0; i--) {\r\n    digit = sanitized.substring(i, (i + 1));\r\n    tmpNum = parseInt(digit, 10);\r\n    if (shouldDouble) {\r\n      tmpNum *= 2;\r\n      if (tmpNum >= 10) {\r\n        sum += ((tmpNum % 10) + 1);\r\n      } else {\r\n        sum += tmpNum;\r\n      }\r\n    } else {\r\n      sum += tmpNum;\r\n    }\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n\r\n  if (Boolean((sum % 10) === 0 ? sanitized : false)) {\r\n    return null;\r\n  }\r\n\r\n  return {creditCard: true};\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { date } from './';\r\n\r\nconst DATE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => DateValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[date][formControlName],[date][formControl],[date][ngModel]',\r\n  providers: [DATE_VALIDATOR]\r\n})\r\nexport class DateValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return date(c);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent, isDate } from '../util/lang';\r\n\r\nexport const date: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return isDate(v) ? null : {date: true};\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { dateISO } from './';\r\n\r\nconst DATE_ISO_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => DateISOValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[dateISO][formControlName],[dateISO][formControl],[dateISO][ngModel]',\r\n  providers: [DATE_ISO_VALIDATOR]\r\n})\r\nexport class DateISOValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return dateISO(c);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent, isDate } from '../util/lang';\r\n\r\nexport const dateISO: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : {dateISO: true};\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { digits } from './';\r\n\r\nconst DIGITS_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => DigitsValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[digits][formControlName],[digits][formControl],[digits][ngModel]',\r\n  providers: [DIGITS_VALIDATOR]\r\n})\r\nexport class DigitsValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return digits(c);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const digits: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return /^\\d+$/.test(v) ? null : {digits: true};\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { email } from './index';\r\n\r\nconst EMAIL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => EmailValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\r\n  providers: [EMAIL_VALIDATOR]\r\n})\r\nexport class EmailValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return email(c);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const email: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : {'email': true};\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { equal } from './index';\r\n\r\nconst EQUAL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => EqualValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[equal][formControlName],[equal][formControl],[equal][ngModel]',\r\n  providers: [EQUAL_VALIDATOR]\r\n})\r\nexport class EqualValidator implements Validator, OnInit, OnChanges {\r\n  @Input() equal: any;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = equal(this.equal);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'equal') {\r\n        this.validator = equal(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const equal = (val: any): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: any = control.value;\r\n\r\n    return val === v ? null : {equal: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { equalTo } from './';\r\n\r\nconst EQUAL_TO_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => EqualToValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[equalTo][formControlName],[equalTo][formControl],[equalTo][ngModel]',\r\n  providers: [EQUAL_TO_VALIDATOR]\r\n})\r\nexport class EqualToValidator implements Validator, OnInit {\r\n  @Input() equalTo: FormControl;\r\n\r\n  private validator: ValidatorFn;\r\n\r\n  ngOnInit() {\r\n    this.validator = equalTo(this.equalTo);\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n}","import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport const equalTo = (equalControl: AbstractControl): ValidatorFn => {\r\n  let subscribe: boolean = false;\r\n\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!subscribe) {\r\n      subscribe = true;\r\n      equalControl.valueChanges.subscribe(() => {\r\n        control.updateValueAndValidity();\r\n      });\r\n    }\r\n\r\n    let v: string = control.value;\r\n\r\n    return equalControl.value === v ? null : {equalTo: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { gt } from './';\r\n\r\nconst GREATER_THAN_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => GreaterThanValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[gt][formControlName],[gt][formControl],[gt][ngModel]',\r\n  providers: [GREATER_THAN_VALIDATOR]\r\n})\r\nexport class GreaterThanValidator implements Validator, OnInit, OnChanges {\r\n  @Input() gt: number;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = gt(this.gt);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'gt') {\r\n        this.validator = gt(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const gt = (gt: number): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!isPresent(gt)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v > +gt ? null : {gt: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { gte } from './';\r\n\r\nconst GREATER_THAN_EQUAL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => GreaterThanEqualValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[gte][formControlName],[gte][formControl],[gte][ngModel]',\r\n  providers: [GREATER_THAN_EQUAL_VALIDATOR]\r\n})\r\nexport class GreaterThanEqualValidator implements Validator, OnInit, OnChanges {\r\n  @Input() gte: number;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = gte(this.gte);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'gte') {\r\n        this.validator = gte(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const gte = (gte: number): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!isPresent(gte)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v >= +gte ? null : {gte: true};\r\n  };\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { json } from './';\r\n\r\nconst JSON_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => JSONValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[json][formControlName],[json][formControl],[json][ngModel]',\r\n  providers: [JSON_VALIDATOR]\r\n})\r\nexport class JSONValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return json(c);\r\n  }\r\n}","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const json: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n\r\n  try {\r\n    let obj = JSON.parse(v);\r\n\r\n    if (Boolean(obj) && typeof obj === 'object') {\r\n      return null;\r\n    }\r\n  } catch (e) {\r\n  }\r\n  return {json: true};\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { lt } from './';\r\n\r\nconst LESS_THAN_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => LessThanValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[lt][formControlName],[lt][formControl],[lt][ngModel]',\r\n  providers: [LESS_THAN_VALIDATOR]\r\n})\r\nexport class LessThanValidator implements Validator, OnInit, OnChanges {\r\n  @Input() lt: number;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = lt(this.lt);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'lt') {\r\n        this.validator = lt(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const lt = (lt: number): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!isPresent(lt)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v < +lt ? null : {lt: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { lte } from './';\r\n\r\nconst LESS_THAN_EQUAL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => LessThanEqualValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',\r\n  providers: [LESS_THAN_EQUAL_VALIDATOR]\r\n})\r\nexport class LessThanEqualValidator implements Validator, OnInit, OnChanges {\r\n  @Input() lte: number;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = lte(this.lte);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'lte') {\r\n        this.validator = lte(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const lte = (lte: number): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!isPresent(lte)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v <= +lte ? null : {lte: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { max } from './';\r\n\r\nconst MAX_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MaxValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[max][formControlName],[max][formControl],[max][ngModel]',\r\n  providers: [MAX_VALIDATOR]\r\n})\r\nexport class MaxValidator implements Validator, OnInit, OnChanges {\r\n  @Input() max: number;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = max(this.max);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'max') {\r\n        this.validator = max(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const max = (max: number): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (!isPresent(max)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v <= +max ? null : {actualValue: v, requiredValue: +max, max: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { maxDate } from './';\r\n\r\nconst MAX_DATE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MaxDateValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[maxDate][formControlName],[maxDate][formControl],[maxDate][ngModel]',\r\n  providers: [MAX_DATE_VALIDATOR]\r\n})\r\nexport class MaxDateValidator implements Validator, OnInit, OnChanges {\r\n  @Input() maxDate;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = maxDate(this.maxDate);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'maxDate') {\r\n        this.validator = maxDate(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent, isDate } from '../util/lang';\r\n\r\nexport const maxDate = (maxDate: any): ValidatorFn => {\r\n  if (!isDate(maxDate) && !(maxDate instanceof Function)) {\r\n    throw Error('maxDate value must be or return a formatted date');\r\n  }\r\n\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let d: Date = new Date(control.value);\r\n\r\n    if (!isDate(d)) return {maxDate: true};\r\n    if (maxDate instanceof Function) maxDate = maxDate();\r\n\r\n    return d <= new Date(maxDate) ? null : {maxDate: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { min } from './';\r\n\r\nconst MIN_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MinValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[min][formControlName],[min][formControl],[min][ngModel]',\r\n  providers: [MIN_VALIDATOR]\r\n})\r\nexport class MinValidator implements Validator, OnInit, OnChanges {\r\n  @Input() min: number;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = min(this.min);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'min') {\r\n        this.validator = min(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const min = (min: number): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (!isPresent(min)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v >= +min ? null : {actualValue: v, requiredValue: +min, min: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { minDate } from './';\r\n\r\nconst MIN_DATE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MinDateValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[minDate][formControlName],[minDate][formControl],[minDate][ngModel]',\r\n  providers: [MIN_DATE_VALIDATOR]\r\n})\r\nexport class MinDateValidator implements Validator, OnInit, OnChanges {\r\n  @Input() minDate;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = minDate(this.minDate);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'minDate') {\r\n        this.validator = minDate(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent, isDate } from '../util/lang';\r\n\r\nexport const minDate = (minDate: any): ValidatorFn => {\r\n\r\n  if (!isDate(minDate) && !(minDate instanceof Function)) {\r\n    throw Error('minDate value must be or return a formatted date');\r\n  }\r\n\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let d: Date = new Date(control.value);\r\n\r\n    if (!isDate(d)) return {minDate: true};\r\n    if (minDate instanceof Function) minDate = minDate();\r\n\r\n    return d >= new Date(minDate) ? null : {minDate: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { notEqual } from './index';\r\n\r\nconst NOT_EQUAL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => NotEqualValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[notEqual][formControlName],[notEqual][formControl],[notEqual][ngModel]',\r\n  providers: [NOT_EQUAL_VALIDATOR]\r\n})\r\nexport class NotEqualValidator implements Validator, OnInit, OnChanges {\r\n  @Input() notEqual: any;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = notEqual(this.notEqual);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'notEqual') {\r\n        this.validator = notEqual(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const notEqual = (val: any): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: any = control.value;\r\n\r\n    return val !== v ? null : {notEqual: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { notEqualTo } from './';\r\n\r\nconst NOT_EQUAL_TO_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => NotEqualToValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[notEqualTo][formControlName],[notEqualTo][formControl],[notEqualTo][ngModel]',\r\n  providers: [NOT_EQUAL_TO_VALIDATOR]\r\n})\r\nexport class NotEqualToValidator implements Validator, OnInit {\r\n  @Input() notEqualTo: FormControl;\r\n\r\n  private validator: ValidatorFn;\r\n\r\n  ngOnInit() {\r\n    this.validator = notEqualTo(this.notEqualTo);\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n}\r\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport const notEqualTo = (notEqualControl: AbstractControl): ValidatorFn => {\r\n  let subscribe: boolean = false;\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!subscribe) {\r\n      subscribe = true;\r\n      notEqualControl.valueChanges.subscribe(() => {\r\n        control.updateValueAndValidity();\r\n      });\r\n    }\r\n\r\n    let v: string = control.value;\r\n\r\n    return notEqualControl.value !== v ? null : {notEqualTo: true};\r\n  };\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { number } from './';\r\n\r\nconst NUMBER_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => NumberValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[number][formControlName],[number][formControl],[number][ngModel]',\r\n  providers: [NUMBER_VALIDATOR]\r\n})\r\nexport class NumberValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return number(c);\r\n  }\r\n}","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const number: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : {'number': true};\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { phone } from './';\r\n\r\n\r\nexport enum PhoneNumberTypes {\r\n  FIXED_LINE = 0,\r\n  MOBILE = 1,\r\n  // In some regions (e.g. the USA), it is impossible to distinguish between\r\n  // fixed-line and mobile numbers by looking at the phone number itself.\r\n  FIXED_LINE_OR_MOBILE = 2,\r\n  // Freephone lines\r\n  TOLL_FREE = 3,\r\n  PREMIUM_RATE = 4,\r\n  // The cost of this call is shared between the caller and the recipient, and\r\n  // is hence typically less than PREMIUM_RATE calls. See\r\n  // http=//en.wikipedia.org/wiki/Shared_Cost_Service for more information.\r\n  SHARED_COST = 5,\r\n  // Voice over IP numbers. This includes TSoIP (Telephony Service over IP).\r\n  VOIP = 6,\r\n  // A personal number is associated with a particular person, and may be routed\r\n  // to either a MOBILE or FIXED_LINE number. Some more information can be found\r\n  // here= http=//en.wikipedia.org/wiki/Personal_Numbers\r\n  PERSONAL_NUMBER = 7,\r\n  PAGER = 8,\r\n  // Used for 'Universal Access Numbers' or 'Company Numbers'. They may be\r\n  // further routed to specific offices, but allow one number to be used for a\r\n  // company.\r\n  UAN = 9,\r\n  // Used for 'Voice Mail Access Numbers'.\r\n  VOICEMAIL = 10,\r\n  // A phone number is of type UNKNOWN when it does not fit any of the known\r\n  // patterns for a specific region.\r\n  UNKNOWN = -1\r\n};\r\n\r\nconst PHONE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => PhoneValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[phone][formControlName],[phone][formControl],[phone][ngModel]',\r\n  providers: [PHONE_VALIDATOR]\r\n})\r\nexport class PhoneValidator implements Validator, OnInit, OnChanges {\r\n  @Input() phone: string;\r\n  @Input() phoneNumberType: PhoneNumberTypes;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = phone(this.phone, this.phoneNumberType);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'phoneNumberType' && typeof (this.phoneNumberType) === 'string') {\r\n        this.phoneNumberType = (<any>PhoneNumberTypes)[this.phoneNumberType];\r\n      }\r\n      if (key === 'phone' || key === 'phoneNumberType') {\r\n        this.validator = phone(this.phone, this.phoneNumberType);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n// import { isValidNumber, CountryCode, TelephoneNumber, getNumberType } from 'libphonenumber-js';\r\n// google-libphonenumber\r\n// Require `PhoneNumberFormat`.\r\nconst PNF = require('google-libphonenumber').PhoneNumberFormat;\r\n\r\n// Get an instance of `PhoneNumberUtil`.\r\nconst phoneUtil = require('google-libphonenumber').PhoneNumberUtil.getInstance();\r\n\r\n// Parse number with country code and keep raw input.\r\n\r\nimport { isPresent } from '../util/lang';\r\nimport { PhoneNumberTypes } from '.';\r\n\r\nexport const phone = (country: string, phoneNumberType: PhoneNumberTypes): ValidatorFn => {\r\n  return (control: AbstractControl): { [key: string]: boolean } => {\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let isValid = false;\r\n    let v = control.value;\r\n    try {\r\n      var number = phoneUtil.parse(v, country);\r\n      let isValidNumber = phoneUtil.isValidNumber(number);\r\n      let numberType = phoneUtil.getNumberType(number) as PhoneNumberTypes;\r\n      let region = phoneUtil.getRegionCodeForNumber(number);\r\n      isValid = isValidNumber && (!phoneNumberType || phoneNumberType == numberType || phoneNumberType == PhoneNumberTypes.FIXED_LINE_OR_MOBILE);\r\n      // let isValid =  isValidNumber(v as TelephoneNumber, country as CountryCode)\r\n      // let a = getNumberType(v as TelephoneNumber, country as CountryCode);\r\n      // console.log('number: ( ' + v + ' ) ' + ', valid: (' + isValid + ' )' + ', type: (' + numberType + ' )' + ', region: (' + region + ' )');\r\n    } catch (e) {\r\n\r\n    }\r\n    return isValid ? null : { phone: true };\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { range } from './';\r\n\r\nconst RANGE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => RangeValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[range][formControlName],[range][formControl],[range][ngModel]',\r\n  providers: [RANGE_VALIDATOR]\r\n})\r\nexport class RangeValidator implements Validator, OnInit, OnChanges {\r\n  @Input() range: [number];\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = range(this.range);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'range') {\r\n        this.validator = range(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const range = (range: Array<number>): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (!isPresent(range)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: number = +control.value;\r\n    return v >= range[0] && v <= range[1] ? null : {actualValue: v, requiredValue: range, range: true};\r\n  };\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { rangeLength } from './';\r\n\r\nconst RANGE_LENGTH_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => RangeLengthValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[rangeLength][formControlName],[rangeLength][formControl],[rangeLength][ngModel]',\r\n  providers: [RANGE_LENGTH_VALIDATOR]\r\n})\r\nexport class RangeLengthValidator implements Validator, OnInit, OnChanges {\r\n  @Input() rangeLength: [number];\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = rangeLength(this.rangeLength);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'rangeLength') {\r\n        this.validator = rangeLength(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const rangeLength = (rangeLength: Array<number>): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (!isPresent(rangeLength)) return null;\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: string = control.value;\r\n    return v.length >= rangeLength[0] && v.length <= rangeLength[1] ? null : {rangeLength: true};\r\n  };\r\n};\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { url } from './';\r\n\r\nconst URL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => UrlValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[url][formControlName],[url][formControl],[url][ngModel]',\r\n  providers: [URL_VALIDATOR]\r\n})\r\nexport class UrlValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return url(c);\r\n  }\r\n}","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nexport const url: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (isPresent(Validators.required(control))) return null;\r\n\r\n  let v: string = control.value;\r\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : {'url': true};\r\n};\r\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { uuid } from './';\r\n\r\nconst UUID_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => UUIDValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[uuid][formControlName],[uuid][formControl],[uuid][ngModel]',\r\n  providers: [UUID_VALIDATOR]\r\n})\r\nexport class UUIDValidator implements Validator, OnInit, OnChanges {\r\n  @Input() uuid;\r\n\r\n  private validator: ValidatorFn;\r\n  private onChange: () => void;\r\n\r\n  ngOnInit() {\r\n    this.validator = uuid(this.uuid);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (let key in changes) {\r\n      if (key === 'uuid') {\r\n        this.validator = uuid(changes[key].currentValue);\r\n        if (this.onChange) this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return this.validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\n\r\nimport { isPresent } from '../util/lang';\r\n\r\nconst uuids = {\r\n  '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n  '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n  '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n  'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\r\n};\r\n\r\nexport const uuid = (version?: string): ValidatorFn => {\r\n  return (control: AbstractControl): {[key: string]: any} => {\r\n    if (isPresent(Validators.required(control))) return null;\r\n\r\n    let v: string = control.value;\r\n    let pattern = uuids[version] || uuids.all;\r\n\r\n    return (new RegExp(pattern)).test(v) ? null : {uuid: true};\r\n  };\r\n};\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { base64, Base64Validator } from './base64';\r\nimport { creditCard, CreditCardValidator } from './credit-card';\r\nimport { date, DateValidator } from './date';\r\nimport { dateISO, DateISOValidator } from './date-ios';\r\nimport { digits, DigitsValidator } from './digits';\r\nimport { email, EmailValidator } from './email';\r\nimport { equal, EqualValidator } from './equal';\r\nimport { equalTo, EqualToValidator } from './equal-to';\r\nimport { gt, GreaterThanValidator } from './greater-than';\r\nimport { gte, GreaterThanEqualValidator } from './greater-than-equal';\r\nimport { json, JSONValidator } from './json';\r\nimport { lt, LessThanValidator } from './less-than';\r\nimport { lte, LessThanEqualValidator } from './less-than-equal';\r\nimport { max, MaxValidator } from './max';\r\nimport { maxDate, MaxDateValidator } from './max-date';\r\nimport { min, MinValidator } from './min';\r\nimport { minDate, MinDateValidator } from './min-date';\r\nimport { notEqual, NotEqualValidator } from './not-equal';\r\nimport { notEqualTo, NotEqualToValidator } from './not-equal-to';\r\nimport { number, NumberValidator } from './number';\r\nimport { phone, PhoneValidator } from './phone';\r\nimport { range, RangeValidator } from './range';\r\nimport { rangeLength, RangeLengthValidator } from './range-length';\r\nimport { url, UrlValidator } from './url';\r\nimport { uuid, UUIDValidator } from './uuid';\r\n\r\nexport const CustomValidators: any = {\r\n  base64,\r\n  creditCard,\r\n  date,\r\n  dateISO,\r\n  digits,\r\n  email,\r\n  equal,\r\n  equalTo,\r\n  gt,\r\n  gte,\r\n  json,\r\n  lt,\r\n  lte,\r\n  max,\r\n  maxDate,\r\n  min,\r\n  minDate,\r\n  notEqual,\r\n  notEqualTo,\r\n  number,\r\n  phone,\r\n  range,\r\n  rangeLength,\r\n  url,\r\n  uuid\r\n};\r\n\r\nconst CUSTOM_FORM_DIRECTIVES = [\r\n  Base64Validator,\r\n  CreditCardValidator,\r\n  DateValidator,\r\n  DateISOValidator,\r\n  DigitsValidator,\r\n  EmailValidator,\r\n  EqualValidator,\r\n  EqualToValidator,\r\n  GreaterThanValidator,\r\n  GreaterThanEqualValidator,\r\n  JSONValidator,\r\n  LessThanValidator,\r\n  LessThanEqualValidator,\r\n  MaxValidator,\r\n  MaxDateValidator,\r\n  MinValidator,\r\n  MinDateValidator,\r\n  NotEqualValidator,\r\n  NotEqualToValidator,\r\n  NumberValidator,\r\n  PhoneValidator,\r\n  RangeValidator,\r\n  RangeLengthValidator,\r\n  UrlValidator,\r\n  UUIDValidator\r\n];\r\n\r\n@NgModule({\r\n  declarations: [CUSTOM_FORM_DIRECTIVES],\r\n  exports: [CUSTOM_FORM_DIRECTIVES]\r\n})\r\nexport class CustomFormsModule {\r\n}\r\n"],"names":["NG_VALIDATORS","forwardRef","Base64Validator","Directive","Validators","CreditCardValidator","DateValidator","DateISOValidator","DigitsValidator","EmailValidator","EqualValidator","Input","EqualToValidator","FormControl","GreaterThanValidator","GreaterThanEqualValidator","JSONValidator","LessThanValidator","LessThanEqualValidator","MaxValidator","MaxDateValidator","MinValidator","MinDateValidator","NotEqualValidator","NotEqualToValidator","NumberValidator","PhoneNumberTypes","PhoneValidator","phone","RangeValidator","RangeLengthValidator","UrlValidator","UUIDValidator","NgModule"],"mappings":";;;;;;;;;;;;;;;;;AAKA,IAAM,gBAAgB,GAAQ;IAC5B,OAAO,EAAEA,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAC,kBAAe,GAAA,CAAC;IAC9C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,qCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;KAClB;IAHUA,kBAAe;QAJ3BC,uBAAS,CAAC;YACT,QAAQ,EAAE,mEAAmE;YAC7E,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC;OACWD,kBAAe,CAI3B;IAAD,yBAAC;CAAA,IAAA,AAED;;mBCrB0B,GAAQ;IAChC,OAAO,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;CAC1C;AAED,gBAAuB,GAAQ;IAC7B,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;CACtD;;ACFM,IAAM,MAAM,GAAgB,UAAC,OAAwB;IAC1D,IAAI,SAAS,CAACE,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,2EAA2E,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;CACtH,CAAC;;ACJF,IAAM,qBAAqB,GAAQ;IACjC,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAI,sBAAmB,GAAA,CAAC;IAClD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,yCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;KACtB;IAHUA,sBAAmB;QAJ/BF,uBAAS,CAAC;YACT,QAAQ,EAAE,+EAA+E;YACzF,SAAS,EAAE,CAAC,qBAAqB,CAAC;SACnC,CAAC;OACWE,sBAAmB,CAI/B;IAAD,6BAAC;CAAA,IAAA,AAED;;ACjBO,IAAM,UAAU,GAAgB,UAAC,OAAwB;IAC9D,IAAI,SAAS,CAACD,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAE9B,IAAI,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;;IAG1C,IAAI,EAAE,uJAAuJ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;QAC9K,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC;KAC3B;IAED,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,KAAK,CAAC;IACV,IAAI,MAAM,CAAC;IACX,IAAI,YAAY,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC9C,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACxC,MAAM,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7B,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,CAAC,CAAC;YACZ,IAAI,MAAM,IAAI,EAAE,EAAE;gBAChB,GAAG,KAAK,CAAC,MAAM,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;aAC5B;iBAAM;gBACL,GAAG,IAAI,MAAM,CAAC;aACf;SACF;aAAM;YACL,GAAG,IAAI,MAAM,CAAC;SACf;QACD,YAAY,GAAG,CAAC,YAAY,CAAC;KAC9B;IAED,IAAI,OAAO,CAAC,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC,GAAG,SAAS,GAAG,KAAK,CAAC,EAAE;QACjD,OAAO,IAAI,CAAC;KACb;IAED,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC;CAC3B,CAAC;;ACpCF,IAAM,cAAc,GAAQ;IAC1B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAK,gBAAa,GAAA,CAAC;IAC5C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,mCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;KAChB;IAHUA,gBAAa;QAJzBH,uBAAS,CAAC;YACT,QAAQ,EAAE,6DAA6D;YACvE,SAAS,EAAE,CAAC,cAAc,CAAC;SAC5B,CAAC;OACWG,gBAAa,CAIzB;IAAD,uBAAC;CAAA,IAAA,AAED;;ACjBO,IAAM,IAAI,GAAgB,UAAC,OAAwB;IACxD,IAAI,SAAS,CAACF,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;CACxC,CAAC;;ACJF,IAAM,kBAAkB,GAAQ;IAC9B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAM,mBAAgB,GAAA,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,sCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;KACnB;IAHUA,mBAAgB;QAJ5BJ,uBAAS,CAAC;YACT,QAAQ,EAAE,sEAAsE;YAChF,SAAS,EAAE,CAAC,kBAAkB,CAAC;SAChC,CAAC;OACWI,mBAAgB,CAI5B;IAAD,0BAAC;CAAA,IAAA,AAED;;ACjBO,IAAM,OAAO,GAAgB,UAAC,OAAwB;IAC3D,IAAI,SAAS,CAACH,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,8DAA8D,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;CACxG,CAAC;;ACJF,IAAM,gBAAgB,GAAQ;IAC5B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAO,kBAAe,GAAA,CAAC;IAC9C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,qCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;KAClB;IAHUA,kBAAe;QAJ3BL,uBAAS,CAAC;YACT,QAAQ,EAAE,mEAAmE;YAC7E,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC;OACWK,kBAAe,CAI3B;IAAD,yBAAC;CAAA,IAAA,AAED;;ACjBO,IAAM,MAAM,GAAgB,UAAC,OAAwB;IAC1D,IAAI,SAAS,CAACJ,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC;CAChD,CAAC;;ACJF,IAAM,eAAe,GAAQ;IAC3B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAQ,iBAAc,GAAA,CAAC;IAC7C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,oCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;KACjB;IAHUA,iBAAc;QAJ1BN,uBAAS,CAAC;YACT,QAAQ,EAAE,gEAAgE;YAC1E,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC;OACWM,iBAAc,CAI1B;IAAD,wBAAC;CAAA,IAAA,AAED;;ACjBO,IAAM,KAAK,GAAgB,UAAC,OAAwB;IACzD,IAAI,SAAS,CAACL,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,wJAAwJ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;CAClM,CAAC;;ACJF,IAAM,eAAe,GAAQ;IAC3B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAS,iBAAc,GAAA,CAAC;IAC7C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,oCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpC;IAEDA,uCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,OAAO,EAAE;gBACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAClD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,oCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,qDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARC,mBAAK,EAAE;;oDAAY;IADTD,iBAAc;QAJ1BP,uBAAS,CAAC;YACT,QAAQ,EAAE,gEAAgE;YAC1E,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC;OACWO,iBAAc,CA0B1B;IAAD,wBAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,KAAK,GAAG,UAAC,GAAQ;IAC5B,OAAO,UAAC,OAAwB;QAC9B,IAAI,SAAS,CAACN,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAQ,OAAO,CAAC,KAAK,CAAC;QAE3B,OAAO,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;KACzC,CAAC;CACH,CAAC;;ACPF,IAAM,kBAAkB,GAAQ;IAC9B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAW,mBAAgB,GAAA,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAYN;IAPCA,sCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACxC;IAEDA,sCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAVQ;QAARD,mBAAK,EAAE;sDAAUE,0BAAW,oBAAXA,0BAAW;wDAAC;IADnBD,mBAAgB;QAJ5BT,uBAAS,CAAC;YACT,QAAQ,EAAE,sEAAsE;YAChF,SAAS,EAAE,CAAC,kBAAkB,CAAC;SAChC,CAAC;OACWS,mBAAgB,CAY5B;IAAD,0BAAC;;CAAA,IAAA,AACD;;AC1BO,IAAM,OAAO,GAAG,UAAC,YAA6B;IACnD,IAAI,SAAS,GAAY,KAAK,CAAC;IAE/B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,EAAE;YACd,SAAS,GAAG,IAAI,CAAC;YACjB,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC;gBAClC,OAAO,CAAC,sBAAsB,EAAE,CAAC;aAClC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;QAE9B,OAAO,YAAY,CAAC,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;KAC1D,CAAC;CACH,CAAC;;ACZF,IAAM,sBAAsB,GAAQ;IAClC,OAAO,EAAEZ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAa,uBAAoB,GAAA,CAAC;IACnD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,0CAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC9B;IAEDA,6CAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,0CAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,2DAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARH,mBAAK,EAAE;;uDAAY;IADTG,uBAAoB;QAJhCX,uBAAS,CAAC;YACT,QAAQ,EAAE,uDAAuD;YACjE,SAAS,EAAE,CAAC,sBAAsB,CAAC;SACpC,CAAC;OACWW,uBAAoB,CA0BhC;IAAD,8BAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,EAAE,GAAG,UAAC,EAAU;IAC3B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAAE,OAAO,IAAI,CAAC;QAChC,IAAI,SAAS,CAACV,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,EAAC,EAAE,EAAE,IAAI,EAAC,CAAC;KACpC,CAAC;CACH,CAAC;;ACPF,IAAM,4BAA4B,GAAQ;IACxC,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAc,4BAAyB,GAAA,CAAC;IACxD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,+CAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChC;IAEDA,kDAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,KAAK,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAChD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,+CAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,gEAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARJ,mBAAK,EAAE;;6DAAa;IADVI,4BAAyB;QAJrCZ,uBAAS,CAAC;YACT,QAAQ,EAAE,0DAA0D;YACpE,SAAS,EAAE,CAAC,4BAA4B,CAAC;SAC1C,CAAC;OACWY,4BAAyB,CA0BrC;IAAD,mCAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,GAAG,GAAG,UAAC,GAAW;IAC7B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QACjC,IAAI,SAAS,CAACX,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC;KACvC,CAAC;CACH,CAAC;;ACPF,IAAM,cAAc,GAAQ;IAC1B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAe,gBAAa,GAAA,CAAC;IAC5C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,mCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;KAChB;IAHUA,gBAAa;QAJzBb,uBAAS,CAAC;YACT,QAAQ,EAAE,6DAA6D;YACvE,SAAS,EAAE,CAAC,cAAc,CAAC;SAC5B,CAAC;OACWa,gBAAa,CAIzB;IAAD,uBAAC;CAAA,IAAA,AACD;;AChBO,IAAM,IAAI,GAAgB,UAAC,OAAwB;IACxD,IAAI,SAAS,CAACZ,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAE9B,IAAI;QACF,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAExB,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3C,OAAO,IAAI,CAAC;SACb;KACF;IAAC,OAAO,CAAC,EAAE;KACX;IACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;CACrB,CAAC;;ACbF,IAAM,mBAAmB,GAAQ;IAC/B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAgB,oBAAiB,GAAA,CAAC;IAChD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,uCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC9B;IAEDA,0CAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,uCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,wDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARN,mBAAK,EAAE;;oDAAY;IADTM,oBAAiB;QAJ7Bd,uBAAS,CAAC;YACT,QAAQ,EAAE,uDAAuD;YACjE,SAAS,EAAE,CAAC,mBAAmB,CAAC;SACjC,CAAC;OACWc,oBAAiB,CA0B7B;IAAD,2BAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,EAAE,GAAG,UAAC,EAAU;IAC3B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAAE,OAAO,IAAI,CAAC;QAChC,IAAI,SAAS,CAACb,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,EAAC,EAAE,EAAE,IAAI,EAAC,CAAC;KACpC,CAAC;CACH,CAAC;;ACPF,IAAM,yBAAyB,GAAQ;IACrC,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAiB,yBAAsB,GAAA,CAAC;IACrD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,4CAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChC;IAEDA,+CAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,KAAK,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAChD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,4CAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,6DAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARP,mBAAK,EAAE;;0DAAa;IADVO,yBAAsB;QAJlCf,uBAAS,CAAC;YACT,QAAQ,EAAE,0DAA0D;YACpE,SAAS,EAAE,CAAC,yBAAyB,CAAC;SACvC,CAAC;OACWe,yBAAsB,CA0BlC;IAAD,gCAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,GAAG,GAAG,UAAC,GAAW;IAC7B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QACjC,IAAI,SAAS,CAACd,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC;KACvC,CAAC;CACH,CAAC;;ACPF,IAAM,aAAa,GAAQ;IACzB,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAkB,eAAY,GAAA,CAAC;IAC3C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,kCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChC;IAEDA,qCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,KAAK,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAChD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,kCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,mDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARR,mBAAK,EAAE;;gDAAa;IADVQ,eAAY;QAJxBhB,uBAAS,CAAC;YACT,QAAQ,EAAE,0DAA0D;YACpE,SAAS,EAAE,CAAC,aAAa,CAAC;SAC3B,CAAC;OACWgB,eAAY,CA0BxB;IAAD,sBAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,GAAG,GAAG,UAAC,GAAW;IAC7B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QACjC,IAAI,SAAS,CAACf,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAC,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC;KAC5E,CAAC;CACH,CAAC;;ACPF,IAAM,kBAAkB,GAAQ;IAC9B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAmB,mBAAgB,GAAA,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,sCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACxC;IAEDA,yCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,SAAS,EAAE;gBACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBACpD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,sCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,uDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAART,mBAAK,EAAE;;wDAAS;IADNS,mBAAgB;QAJ5BjB,uBAAS,CAAC;YACT,QAAQ,EAAE,sEAAsE;YAChF,SAAS,EAAE,CAAC,kBAAkB,CAAC;SAChC,CAAC;OACWiB,mBAAgB,CA0B5B;IAAD,0BAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,OAAO,GAAG,UAAC,OAAY;IAClC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,YAAY,QAAQ,CAAC,EAAE;QACtD,MAAM,KAAK,CAAC,kDAAkD,CAAC,CAAC;KACjE;IAED,OAAO,UAAC,OAAwB;QAC9B,IAAI,SAAS,CAAChB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAS,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEtC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAAE,OAAO,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACvC,IAAI,OAAO,YAAY,QAAQ;YAAE,OAAO,GAAG,OAAO,EAAE,CAAC;QAErD,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;KACxD,CAAC;CACH,CAAC;;ACdF,IAAM,aAAa,GAAQ;IACzB,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAoB,eAAY,GAAA,CAAC;IAC3C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,kCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChC;IAEDA,qCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,KAAK,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAChD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,kCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,mDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARV,mBAAK,EAAE;;gDAAa;IADVU,eAAY;QAJxBlB,uBAAS,CAAC;YACT,QAAQ,EAAE,0DAA0D;YACpE,SAAS,EAAE,CAAC,aAAa,CAAC;SAC3B,CAAC;OACWkB,eAAY,CA0BxB;IAAD,sBAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,GAAG,GAAG,UAAC,GAAW;IAC7B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QACjC,IAAI,SAAS,CAACjB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAC,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC;KAC5E,CAAC;CACH,CAAC;;ACPF,IAAM,kBAAkB,GAAQ;IAC9B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAqB,mBAAgB,GAAA,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,sCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACxC;IAEDA,yCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,SAAS,EAAE;gBACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBACpD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,sCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,uDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARX,mBAAK,EAAE;;wDAAS;IADNW,mBAAgB;QAJ5BnB,uBAAS,CAAC;YACT,QAAQ,EAAE,sEAAsE;YAChF,SAAS,EAAE,CAAC,kBAAkB,CAAC;SAChC,CAAC;OACWmB,mBAAgB,CA0B5B;IAAD,0BAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,OAAO,GAAG,UAAC,OAAY;IAElC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,YAAY,QAAQ,CAAC,EAAE;QACtD,MAAM,KAAK,CAAC,kDAAkD,CAAC,CAAC;KACjE;IAED,OAAO,UAAC,OAAwB;QAC9B,IAAI,SAAS,CAAClB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAS,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEtC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAAE,OAAO,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACvC,IAAI,OAAO,YAAY,QAAQ;YAAE,OAAO,GAAG,OAAO,EAAE,CAAC;QAErD,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;KACxD,CAAC;CACH,CAAC;;ACfF,IAAM,mBAAmB,GAAQ;IAC/B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAsB,oBAAiB,GAAA,CAAC;IAChD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,uCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC1C;IAEDA,0CAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,UAAU,EAAE;gBACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBACrD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,uCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,wDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARZ,mBAAK,EAAE;;0DAAe;IADZY,oBAAiB;QAJ7BpB,uBAAS,CAAC;YACT,QAAQ,EAAE,yEAAyE;YACnF,SAAS,EAAE,CAAC,mBAAmB,CAAC;SACjC,CAAC;OACWoB,oBAAiB,CA0B7B;IAAD,2BAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,QAAQ,GAAG,UAAC,GAAQ;IAC/B,OAAO,UAAC,OAAwB;QAC9B,IAAI,SAAS,CAACnB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAQ,OAAO,CAAC,KAAK,CAAC;QAE3B,OAAO,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;KAC5C,CAAC;CACH,CAAC;;ACPF,IAAM,sBAAsB,GAAQ;IAClC,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAuB,sBAAmB,GAAA,CAAC;IAClD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAYN;IAPCA,yCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC9C;IAEDA,yCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAVQ;QAARb,mBAAK,EAAE;sDAAaE,0BAAW,oBAAXA,0BAAW;8DAAC;IADtBW,sBAAmB;QAJ/BrB,uBAAS,CAAC;YACT,QAAQ,EAAE,+EAA+E;YACzF,SAAS,EAAE,CAAC,sBAAsB,CAAC;SACpC,CAAC;OACWqB,sBAAmB,CAY/B;IAAD,6BAAC;;CAAA,IAAA,AAED;;AC3BO,IAAM,UAAU,GAAG,UAAC,eAAgC;IACzD,IAAI,SAAS,GAAY,KAAK,CAAC;IAC/B,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,EAAE;YACd,SAAS,GAAG,IAAI,CAAC;YACjB,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC;gBACrC,OAAO,CAAC,sBAAsB,EAAE,CAAC;aAClC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;QAE9B,OAAO,eAAe,CAAC,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC;KAChE,CAAC;CACH,CAAC;;ACXF,IAAM,gBAAgB,GAAQ;IAC5B,OAAO,EAAExB,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAAwB,kBAAe,GAAA,CAAC;IAC9C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,qCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;KAClB;IAHUA,kBAAe;QAJ3BtB,uBAAS,CAAC;YACT,QAAQ,EAAE,mEAAmE;YAC7E,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC;OACWsB,kBAAe,CAI3B;IAAD,yBAAC;CAAA,IAAA,AACD;;AChBO,IAAM,MAAM,GAAgB,UAAC,OAAwB;IAC1D,IAAI,SAAS,CAACrB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,6CAA6C,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;CACxF,CAAC;;ACHF,IAAYsB,mBA6BX;AA7BD,WAAYA,mBAAgB;IAC1BA,yEAAc,CAAA;IACdA,iEAAU,CAAA;;;IAGVA,6FAAwB,CAAA;;IAExBA,uEAAa,CAAA;IACbA,6EAAgB,CAAA;;;;IAIhBA,2EAAe,CAAA;;IAEfA,6DAAQ,CAAA;;;;IAIRA,mFAAmB,CAAA;IACnBA,+DAAS,CAAA;;;;IAITA,2DAAO,CAAA;;IAEPA,wEAAc,CAAA;;;IAGdA,oEAAY,CAAA;CACb,EA7BWA,mBAAgB,KAAhBA,mBAAgB,QA6B3B;AAAA,AAAC;AAEF,IAAM,eAAe,GAAQ;IAC3B,OAAO,EAAE1B,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAA0B,iBAAc,GAAA,CAAC;IAC7C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA8BN;IAvBCA,oCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAGC,QAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KAC1D;IAEDD,uCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,iBAAiB,IAAI,QAAQ,IAAI,CAAC,eAAe,CAAC,KAAK,QAAQ,EAAE;gBAC3E,IAAI,CAAC,eAAe,GAASD,mBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aACtE;YACD,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,iBAAiB,EAAE;gBAChD,IAAI,CAAC,SAAS,GAAGE,QAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBACzD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDD,oCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,qDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IA5BQ;QAARhB,mBAAK,EAAE;;oDAAe;IACd;QAARA,mBAAK,EAAE;;8DAAmC;IAFhCgB,iBAAc;QAJ1BxB,uBAAS,CAAC;YACT,QAAQ,EAAE,gEAAgE;YAC1E,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC;OACWwB,iBAAc,CA8B1B;IAAD,wBAAC;CAAA,IAAA,AAED;;AC9EA;;;AAGA,IAAM,GAAG,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,iBAAiB,CAAC;;AAG/D,IAAM,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;;AAIjF,AACA,AAEA,AAAO,IAAMC,QAAK,GAAG,UAAC,OAAe,EAAE,eAAiC;IACtE,OAAO,UAAC,OAAwB;QAC9B,IAAI,SAAS,CAACxB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;QACtB,IAAI;YACF,IAAI,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACzC,IAAI,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACpD,IAAI,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC,MAAM,CAAqB,CAAC;YACrE,IAAI,MAAM,GAAG,SAAS,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;YACtD,OAAO,GAAG,aAAa,KAAK,CAAC,eAAe,IAAI,eAAe,IAAI,UAAU,IAAI,eAAe,IAAIsB,mBAAgB,CAAC,oBAAoB,CAAC,CAAC;;;;SAI5I;QAAC,OAAO,CAAC,EAAE;SAEX;QACD,OAAO,OAAO,GAAG,IAAI,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;KACzC,CAAC;CACH,CAAC;;AC7BF,IAAM,eAAe,GAAQ;IAC3B,OAAO,EAAE1B,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAA4B,iBAAc,GAAA,CAAC;IAC7C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,oCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpC;IAEDA,uCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,OAAO,EAAE;gBACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBAClD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,oCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,qDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARlB,mBAAK,EAAE;;oDAAiB;IADdkB,iBAAc;QAJ1B1B,uBAAS,CAAC;YACT,QAAQ,EAAE,gEAAgE;YAC1E,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC;OACW0B,iBAAc,CA0B1B;IAAD,wBAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,KAAK,GAAG,UAAC,KAAoB;IACxC,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QACnC,IAAI,SAAS,CAACzB,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC/B,OAAO,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC;KACpG,CAAC;CACH,CAAC;;ACPF,IAAM,sBAAsB,GAAQ;IAClC,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAA6B,uBAAoB,GAAA,CAAC;IACnD,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,0CAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAChD;IAEDA,6CAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,aAAa,EAAE;gBACzB,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBACxD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,0CAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,2DAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARnB,mBAAK,EAAE;;gEAAuB;IADpBmB,uBAAoB;QAJhC3B,uBAAS,CAAC;YACT,QAAQ,EAAE,kFAAkF;YAC5F,SAAS,EAAE,CAAC,sBAAsB,CAAC;SACpC,CAAC;OACW2B,uBAAoB,CA0BhC;IAAD,8BAAC;CAAA,IAAA,AAED;;ACvCO,IAAM,WAAW,GAAG,UAAC,WAA0B;IACpD,OAAO,UAAC,OAAwB;QAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;YAAE,OAAO,IAAI,CAAC;QACzC,IAAI,SAAS,CAAC1B,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;QAC9B,OAAO,CAAC,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;KAC9F,CAAC;CACH,CAAC;;ACPF,IAAM,aAAa,GAAQ;IACzB,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAA8B,eAAY,GAAA,CAAC;IAC3C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KAIN;IAHCA,kCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;KACf;IAHUA,eAAY;QAJxB5B,uBAAS,CAAC;YACT,QAAQ,EAAE,0DAA0D;YACpE,SAAS,EAAE,CAAC,aAAa,CAAC;SAC3B,CAAC;OACW4B,eAAY,CAIxB;IAAD,sBAAC;CAAA,IAAA,AACD;;AChBO,IAAM,GAAG,GAAgB,UAAC,OAAwB;IACvD,IAAI,SAAS,CAAC3B,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;IAC9B,OAAO,0cAA0c,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;CAClf,CAAC;;ACJF,IAAM,cAAc,GAAQ;IAC1B,OAAO,EAAEJ,4BAAa;IACtB,WAAW,EAAEC,wBAAU,CAAC,cAAM,OAAA+B,gBAAa,GAAA,CAAC;IAC5C,KAAK,EAAE,IAAI;CACZ,CAAC;AAMK;IAAA;KA0BN;IApBCA,mCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClC;IAEDA,sCAAW,GAAX,UAAY,OAAsB;QAChC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;YACvB,IAAI,GAAG,KAAK,MAAM,EAAE;gBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;gBACjD,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;KACF;IAEDA,mCAAQ,GAAR,UAAS,CAAkB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1B;IAEDA,oDAAyB,GAAzB,UAA0B,EAAc;QACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAxBQ;QAARrB,mBAAK,EAAE;;kDAAM;IADHqB,gBAAa;QAJzB7B,uBAAS,CAAC;YACT,QAAQ,EAAE,6DAA6D;YACvE,SAAS,EAAE,CAAC,cAAc,CAAC;SAC5B,CAAC;OACW6B,gBAAa,CA0BzB;IAAD,uBAAC;CAAA,IAAA,AAED;;ACvCA,IAAM,KAAK,GAAG;IACZ,GAAG,EAAE,kEAAkE;IACvE,GAAG,EAAE,wEAAwE;IAC7E,GAAG,EAAE,wEAAwE;IAC7E,KAAK,EAAE,iEAAiE;CACzE,CAAC;AAEF,AAAO,IAAM,IAAI,GAAG,UAAC,OAAgB;IACnC,OAAO,UAAC,OAAwB;QAC9B,IAAI,SAAS,CAAC5B,yBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEzD,IAAI,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;QAC9B,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC;QAE1C,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;KAC5D,CAAC;CACH,CAAC;;ACQK,IAAM,gBAAgB,GAAQ;IACnC,MAAM,QAAA;IACN,UAAU,YAAA;IACV,IAAI,MAAA;IACJ,OAAO,SAAA;IACP,MAAM,QAAA;IACN,KAAK,OAAA;IACL,KAAK,OAAA;IACL,OAAO,SAAA;IACP,EAAE,IAAA;IACF,GAAG,KAAA;IACH,IAAI,MAAA;IACJ,EAAE,IAAA;IACF,GAAG,KAAA;IACH,GAAG,KAAA;IACH,OAAO,SAAA;IACP,GAAG,KAAA;IACH,OAAO,SAAA;IACP,QAAQ,UAAA;IACR,UAAU,YAAA;IACV,MAAM,QAAA;IACN,KAAK,UAAA;IACL,KAAK,OAAA;IACL,WAAW,aAAA;IACX,GAAG,KAAA;IACH,IAAI,MAAA;CACL,CAAC;AAEF,IAAM,sBAAsB,GAAG;IAC7BF,kBAAe;IACfG,sBAAmB;IACnBC,gBAAa;IACbC,mBAAgB;IAChBC,kBAAe;IACfC,iBAAc;IACdC,iBAAc;IACdE,mBAAgB;IAChBE,uBAAoB;IACpBC,4BAAyB;IACzBC,gBAAa;IACbC,oBAAiB;IACjBC,yBAAsB;IACtBC,eAAY;IACZC,mBAAgB;IAChBC,eAAY;IACZC,mBAAgB;IAChBC,oBAAiB;IACjBC,sBAAmB;IACnBC,kBAAe;IACfE,iBAAc;IACdE,iBAAc;IACdC,uBAAoB;IACpBC,eAAY;IACZC,gBAAa;CACd,CAAC;AAMK;IAAA;KACN;IADY,iBAAiB;QAJ7BC,sBAAQ,CAAC;YACR,YAAY,EAAE,CAAC,sBAAsB,CAAC;YACtC,OAAO,EAAE,CAAC,sBAAsB,CAAC;SAClC,CAAC;OACW,iBAAiB,CAC7B;IAAD,wBAAC;CAAA,IAAA,AAED;;;;;;;"}